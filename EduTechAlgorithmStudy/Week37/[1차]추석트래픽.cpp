#include <iostream>
#include <string>
#include <vector>

using namespace std;

int solution(vector<string> lines) {
    int answer = 0;
    
    vector<int> startVec;
    vector<int> endVec;
    for (int i=0; i<lines.size(); i++) {   
        // 로그 문자열: 요청에 대한 응답완료시간 S + " " + 처리시간 T    
        // 응답완료시간 S는 작년 추석인 2016년 9월 15일만 포함하여 고정 길이 2016-09-15 hh:mm:ss.sss 형식으로 되어 있다.
        // 처리시간 T는 0.1s, 0.312s, 2s 와 같이 최대 소수점 셋째 자리까지 기록하며 뒤에는 초 단위를 의미하는 s로 끝난다.
        
        int hh = stoi(lines[i].substr(11,2));
        int mm = stoi(lines[i].substr(14,2));
        int ss = stoi(lines[i].substr(17,2));
        int sss = stoi(lines[i].substr(20,3));
        float t = stof(lines[i].substr(24,5));
        
        int S = sss + ss*1000 + mm*60*1000 + hh*60*60*1000;
        int T = t*1000;
        int start = S - T + 1;
        
        startVec.push_back(start);
        endVec.push_back(S);
    }
    
    // 초당 최대 처리량: 요청의 응답 완료 여부에 관계없이 임의 시간부터 1초(=1,000밀리초)간 처리하는 요청의 최대 개수
    // lines 배열은 응답완료시간 S를 기준으로 오름차순 정렬되어 있다.
    // cf. 첫 번째 로그가 끝나는 시점과 두 번째 로그가 시작하는 시점의 구간인 01:00:04.002 ~ 01:00:05.001 1초 동안 최대 2개가 된다.
    for (int i=0; i<lines.size(); i++) {
        int count = 0;
        int end = endVec[i] + 1000;
        
        for (int j=i; j<lines.size(); j++) {
            if (startVec[j] < end) { count++;}
        }
        
        if (count > answer) { answer = count; }
    }
    
    return answer;
}

int main() {
    vector<vector<string>> lines = {
        {"2016-09-15 01:00:04.001 2.0s",
        "2016-09-15 01:00:07.000 2s"},

        {"2016-09-15 01:00:04.002 2.0s",
        "2016-09-15 01:00:07.000 2s"},

        {"2016-09-15 20:59:57.421 0.351s",
        "2016-09-15 20:59:58.233 1.181s",
        "2016-09-15 20:59:58.299 0.8s",
        "2016-09-15 20:59:58.688 1.041s",
        "2016-09-15 20:59:59.591 1.412s",
        "2016-09-15 21:00:00.464 1.466s",
        "2016-09-15 21:00:00.741 1.581s",
        "2016-09-15 21:00:00.748 2.31s",
        "2016-09-15 21:00:00.966 0.381s",
        "2016-09-15 21:00:02.066 2.62s"},

        {"2016-09-15 00:00:00.000 3s"},

        {"2016-09-15 23:59:59.999 0.001s"},

        {"2016-09-15 01:00:04.001 2.0s", "2016-09-15 01:00:07.000 2s"},

        {"2016-09-15 01:00:04.002 2.0s", "2016-09-15 01:00:07.000 2s"},

        {"2016-09-15 20:59:57.421 0.351s", "2016-09-15 20:59:58.233 1.181s", "2016-09-15 20:59:58.299 0.8s", "2016-09-15 20:59:58.688 1.041s", "2016-09-15 20:59:59.591 1.412s", "2016-09-15 21:00:00.464 1.466s", "2016-09-15 21:00:00.741 1.581s", "2016-09-15 21:00:00.748 2.31s", "2016-09-15 21:00:00.966 0.381s", "2016-09-15 21:00:02.066 2.62s"},

        {"2016-09-15 00:00:00.000 2.3s", "2016-09-15 23:59:59.999 0.1s"}
    };

    for (int i=0; i<lines.size(); i++) {
        printf("%d\n", solution(lines[i]));
    }

    return 0;
}